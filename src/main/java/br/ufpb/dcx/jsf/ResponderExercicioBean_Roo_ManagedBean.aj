// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.ufpb.dcx.jsf;

import br.ufpb.dcx.jsf.ResponderExercicioBean;
import br.ufpb.dcx.jsf.util.MessageFactory;
import br.ufpb.dcx.model.Exercicio;
import br.ufpb.dcx.model.RespostaDeExercicio;
import br.ufpb.dcx.model.Usuario;
import br.ufpb.dcx.service.UsuarioService;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect ResponderExercicioBean_Roo_ManagedBean {
    
    declare @type: ResponderExercicioBean: @ManagedBean(name = "responderExercicioBean");
    
    declare @type: ResponderExercicioBean: @SessionScoped;
    
    @Autowired
    UsuarioService ResponderExercicioBean.usuarioService;
    
    private String ResponderExercicioBean.name = "RespostaDeExercicios";
    
    private List<RespostaDeExercicio> ResponderExercicioBean.allRespostaDeExercicios;
    
    private boolean ResponderExercicioBean.dataVisible = false;
    
    private List<String> ResponderExercicioBean.columns;
    
    private HtmlPanelGrid ResponderExercicioBean.createPanelGrid;
    
    private HtmlPanelGrid ResponderExercicioBean.editPanelGrid;
    
    private HtmlPanelGrid ResponderExercicioBean.viewPanelGrid;
    
    private boolean ResponderExercicioBean.createDialogVisible = false;
    
    @PostConstruct
    public void ResponderExercicioBean.init() {
        columns = new ArrayList<String>();
    }
    
    public String ResponderExercicioBean.getName() {
        return name;
    }
    
    public List<String> ResponderExercicioBean.getColumns() {
        return columns;
    }
    
    public List<RespostaDeExercicio> ResponderExercicioBean.getAllRespostaDeExercicios() {
        return allRespostaDeExercicios;
    }
    
    public void ResponderExercicioBean.setAllRespostaDeExercicios(List<RespostaDeExercicio> allRespostaDeExercicios) {
        this.allRespostaDeExercicios = allRespostaDeExercicios;
    }
    
    public String ResponderExercicioBean.findAllRespostaDeExercicios() {
        allRespostaDeExercicios = respostaDeExercicioService.findAllRespostaDeExercicios();
        dataVisible = !allRespostaDeExercicios.isEmpty();
        return null;
    }
    
    public boolean ResponderExercicioBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ResponderExercicioBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ResponderExercicioBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ResponderExercicioBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ResponderExercicioBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ResponderExercicioBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ResponderExercicioBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ResponderExercicioBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public List<Usuario> ResponderExercicioBean.completeAluno(String query) {
        List<Usuario> suggestions = new ArrayList<Usuario>();
        for (Usuario usuario : usuarioService.findAllUsuarios()) {
            String usuarioStr = String.valueOf(usuario.getNome() +  " "  + usuario.getNickName() +  " "  + usuario.getEmail() +  " "  + usuario.getSenha());
            if (usuarioStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(usuario);
            }
        }
        return suggestions;
    }
    
    public List<Exercicio> ResponderExercicioBean.completeExercicio(String query) {
        List<Exercicio> suggestions = new ArrayList<Exercicio>();
        for (Exercicio exercicio : exercicioService.findAllExercicios()) {
            String exercicioStr = String.valueOf(exercicio.getNome() +  " "  + exercicio.getDataDeVencimento());
            if (exercicioStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(exercicio);
            }
        }
        return suggestions;
    }
    
    public String ResponderExercicioBean.onEdit() {
        return null;
    }
    
    public boolean ResponderExercicioBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ResponderExercicioBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ResponderExercicioBean.displayList() {
        createDialogVisible = false;
        findAllRespostaDeExercicios();
        return "respostaDeExercicio";
    }
    
    public String ResponderExercicioBean.displayCreateDialog() {
        respostaDeExercicio = new RespostaDeExercicio();
        createDialogVisible = true;
        return "respostaDeExercicio";
    }
    
    public String ResponderExercicioBean.persist() {
        String message = "";
        if (respostaDeExercicio.getId() != null) {
            respostaDeExercicioService.updateRespostaDeExercicio(respostaDeExercicio);
            message = "message_successfully_updated";
        } else {
            respostaDeExercicioService.saveRespostaDeExercicio(respostaDeExercicio);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "RespostaDeExercicio");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllRespostaDeExercicios();
    }
    
    public String ResponderExercicioBean.delete() {
        respostaDeExercicioService.deleteRespostaDeExercicio(respostaDeExercicio);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "RespostaDeExercicio");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllRespostaDeExercicios();
    }
    
    public void ResponderExercicioBean.reset() {
        respostaDeExercicio = null;
        createDialogVisible = false;
    }
    
    public void ResponderExercicioBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
